import React, { useEffect, useState, useRef } from "react"
import database from '@react-native-firebase/database';
import auth from '@react-native-firebase/auth';
import {View, StyleSheet, ScrollView, TextInput, FlatList, SafeAreaView, Animated,Button} from "react-native"
import { NativeBaseProvider,Heading,Text} from "native-base"
import Modal from "react-native-modal";


const Inventory = ({navigation}) => {

    // const [users, setUsers] = useState([]);
    let [products, setProducts] =useState([]);
    const [search, setSearch] = useState(null);
    const [filteredDataSource, setFilteredDataSource] = useState([]);
    const [loading, setLoading] = useState(true);
    const [isModalVisible, setModalVisible] = useState(false);
    const [modalData, setModalData] = useState([]);
    // const [textInput, settextInput] = useState();
    const [editedItem, seteditedItem] = useState(0);
    const [uid, setUid] = useState(auth().currentUser.uid);

    const [product_name,setProductName] =useState();
    const [product_discription, setProductDescription] = useState();
    const [product_buycost, setProductbuycost] = useState();
    const [product_salecost, seProductsalecost] = useState();
    const [product_quantity, setProductQuantity] =useState();

    const fadeAnim = useRef(new Animated.Value(0)).current;
    
    Animated.timing(fadeAnim, {
      toValue: 1,
      duration:2000,
      useNativeDriver: true,
    }).start();


    const updateProduct = (item) => {
      setModalVisible(true);
      // setModalData(this.item.FlatList)
      setModalData(item)
      seteditedItem(item.index)


     console.log(item)
    //  console.log(products)
  
    };
    

    const saveProduct =(editedItem)=>{

      setModalVisible(false)
     
      seteditedItem(editedItem)

      const latestData = products.map(item=>{
         if(item.index === editedItem){
          item.product_name = modalData.product_name;
          database()
          .ref(`/admin/products/${uid}`)
          .update({
            product_name : item.product_name
          })
          .then(() => console.log('Data updated.'));
          return item;
         }
         return item;

      })
      products=latestData
      
      console.log(modalData)

     


      
    }

   


    useEffect(() => {

        const userRef = database().ref(`/admin/products/${uid}`);
        const OnloadingListener = userRef.on('value', snapshot => {
            setProducts([]);
            snapshot.forEach(function(childSnapshot) {
            setProducts(products => [...products,childSnapshot.val()]);
            setFilteredDataSource(products => [...products, childSnapshot.val()]);
            });
        });
        return () => {
            userRef.off('value',OnloadingListener);
        };

    }, []);
      

    const searchFilterFunction = (text) => {
        // Check if searched text is not blank
        if (text) {
          // Inserted text is not blank
          // Filter the masterDataSource
          // Update FilteredDataSource
          const newData = products.filter(
            function (item) {
              const itemData = item.category
                ? item.category.toUpperCase()
                : ''.toUpperCase();
              const textData = text.toUpperCase();
              return itemData.indexOf(textData) > -1;
          });
          setFilteredDataSource(newData);
          setSearch(text);
        } else {
          // Inserted text is blank
          // Update FilteredDataSource with masterDataSource
          setFilteredDataSource(products);
          setSearch(text);
        }
      };

      const ItemView = ({item}) => {

        return (
          // Flat List Item
          <Animated.View style={[
            styles.container,
            {
              opacity:fadeAnim
            } 
          ]}>
          <Heading size="sm" style = {{}}>
          {item.product_name}
          </Heading>
         
          <Text mt="5" fontWeight="medium">
              Product Quantity: {item.product_quantity}
          </Text>
          <Text mt="1" fontWeight="medium">
              Product Buy_Cost: {item.product_buycost}
          </Text>
          <Text mt="1" fontWeight="medium">
            Product Sale_Cost:: {item.product_salecost}
          </Text>
          <Text mt="1" fontWeight="medium">
            Product Description: {item.product_discription}
          </Text>
          <Text>
            {item.key}
          </Text>

            <Button title="Update"  onPress={()=> updateProduct(item)}/>
          


          
          </Animated.View>
        );
      };
    
      const ItemSeparatorView = () => {
        return (
          // Flat List Item Separator
          <View
            style={{
              height: 0.5,
              width: '100%',
              backgroundColor: '#C8C8C8',
            }}
          />
        );
      };
    

  return (
    <NativeBaseProvider>
        <SafeAreaView>


        <TextInput
          style={styles.textInputStyle}
          onChangeText={(text) => searchFilterFunction(text)}
          value={search}
          underlineColorAndroid="transparent"
          placeholder="Search Here"
        />
        <FlatList
        // style={{backgroundColor:"red"}}
          data={filteredDataSource}
          keyExtractor={(item, index) => index.toString() }
          ItemSeparatorComponent={ItemSeparatorView}
          renderItem={({item})=><ItemView item={item}/>}
        />
       
       <Modal isVisible={isModalVisible}> 
        <View>
          {/* <Text style={{color:"white"}}>{modalData.product_name}</Text> */}
          <Text style={{color:"white"}}>Ge</Text>
          
        
          <TextInput
          style={{color:"white"}}
          value={modalData.product_name}
          onChangeText={(text)=>setModalData(text)}
          />

            {/* <Button title="Update Save" onPress={()=>updateProduct(modalData)}/> */}
          <Button title="Save" onPress={()=>saveProduct(editedItem)} />
        </View>
      </Modal>

        </SafeAreaView>
    </NativeBaseProvider>
    
  )
}

export default Inventory;


const styles = StyleSheet.create({
  container: {

    marginTop: 10,
    marginBottom:10,
    marginRight:20,
    marginLeft:20,
    // borderColor:"#848784",
    borderTopRightRadius:10,
    borderTopLeftRadius:30,
    borderBottomLeftRadius:10,
    borderBottomRightRadius:30,
    alignContent:"center",
    borderRadius: 2,
    // borderWidth: 1,
    borderRightWidth:3,
    borderLeftWidth:3,
    padding: 15,
    marginBottom: 20,
    backgroundColor:"white", 
    shadowColor: '#171717',
    shadowOffset: {width: -2, height: 4},
    shadowOpacity: 0.2,
    shadowRadius: 3,
    borderLeftColor: 'black',
    borderLeftWidth: 2,
    
    
  },
  input: {
      height: 40,
      margin: 12,
      borderWidth: 1,
      padding: 10,

  },
  textInputStyle: {
      height: 40,
      borderWidth: 1,
      borderBottomRightRadius:20,
      borderTopLeftRadius:20,
      borderBottomLeftRadius:5,
      borderTopRightRadius:5,
      paddingLeft:15,
      marginTop: 20,
      borderRightWidth:3,
      borderLeftWidth:3,
      marginBottom:10,
      marginRight:20,
      marginLeft:20,
      borderColor: '#009688',
      backgroundColor: '#FFFFFF',
    },
    text: {
      color:"#323b35",
      letterSpacing:0.8,
      fontFamily:"lucida grande",
      fontSize:15
      
    },
    texth:{
      color:"#323b35",
      letterSpacing:0.8,
      borderBottomWidth:2,
      borderColor:"#cbd1cb",
      paddingBottom:12,
      textAlign:"center",
      fontFamily:"lucida grande",
      fontSize:20
    }
});
